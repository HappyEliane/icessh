<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" layout="absolute" backgroundColor="#FDFEFE" width="660" height="599" creationComplete="application1_creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import flash.display.DisplayObject;
			
			import mx.core.IFlexDisplayObject;
			import mx.effects.Blur;
			import mx.effects.Parallel;
			import mx.effects.Zoom;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.TweenEvent;
			import mx.managers.PopUpManager;
			
			import spark.events.IndexChangeEvent;
			
			public static function show(control:IFlexDisplayObject,parent:DisplayObject,modal:Boolean):void{
				var parallel:Parallel=new Parallel();
				var zoom:Zoom=new  Zoom();
				zoom.zoomHeightFrom=0.2;
				zoom.zoomWidthFrom=0.2;
				zoom.zoomHeightTo=1;
				zoom.zoomWidthTo=1;
				var mShowEffect:Blur=new Blur();
				mShowEffect.blurXFrom=255;
				mShowEffect.blurYFrom=255;
				mShowEffect.blurXTo=0;
				mShowEffect.blurYTo=0;
				parallel.duration=500;
				parallel.target=control;
				parallel.addChild(mShowEffect);
				parallel.addChild(zoom);
				PopUpManager.addPopUp(control,parent,modal);
				PopUpManager.centerPopUp(control);
				parallel.play();
			}
			/*关闭隐藏特效  */
			public static function remove(control:IFlexDisplayObject):void
			{
				var parallel:Parallel=new Parallel();
				var mHideEffect:Blur=new Blur();
				mHideEffect.blurXFrom=0;
				mHideEffect.blurYFrom=0;
				mHideEffect.blurXTo=255;
				mHideEffect.blurYTo=255;
				var zoom:Zoom=new  Zoom();
				zoom.zoomHeightFrom=1;
				zoom.zoomWidthFrom=1;
				zoom.zoomHeightTo=0;
				zoom.zoomWidthTo=0;
				parallel.addChild(mHideEffect);
				parallel.addChild(zoom);
				//PopUpManager.removePopUp(control);
				mHideEffect.addEventListener(TweenEvent.TWEEN_END,function():void{
					PopUpManager.removePopUp(control);
				});
				zoom.addEventListener(TweenEvent.TWEEN_END,function():void{
					PopUpManager.removePopUp(control);
				});
				parallel.duration=500;
				parallel.target=control;
				parallel.play();
			}


			
		]]>
	</fx:Script>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			
			import spark.events.IndexChangeEvent;

			protected function application1_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				var httpservice:HTTPService=new HTTPService();
				httpservice.resultFormat="text";
				httpservice.url="http://localhost:8080/icessh/BCModifyMenuServlet";
				httpservice.method="POST";
				var param:Object=new Object;
				param.kind="homehaveordersp";
				
				
				httpservice.send(param);
				httpservice.addEventListener(ResultEvent.RESULT,success_haveordersp_handler);
			}
			[Bindable]
			private var allOrderBus:ArrayCollection=new ArrayCollection();
			import com.adobe.serialization.json.JSON;						  //JSON:1
			[Bindable]
			private var jsonObj3:Object; 
			private function success_haveordersp_handler(result:ResultEvent):void
			{
				var re:String=result.result.toString();                        //JSON:3
				//	Alert.show(re);
				jsonObj3=JSON.decode(re);                                      //JSON:4
				var r:ArrayCollection=new ArrayCollection(jsonObj3 as Array);  //JSON:5
				//allorderb.dataProvider=r;
				allOrderBus=r;
				
				
			}


			protected function service_changeHandler(event:IndexChangeEvent):void
			{
				// TODO Auto-generated method stub
				var id:String=service.selectedItem.spid;
			//	Alert.show(id);
				spdes.text=service.selectedItem.spdes;
			//	field.text=service.selectedItem.
				var httpservice:HTTPService=new HTTPService();
				httpservice.resultFormat="text";
				httpservice.url="http://localhost:8080/NewServicePatternDesigner/flexServlet";
				httpservice.method="POST";
				var param:Object=new Object;
				param.kind="queryspbyID";
				param.spid=id;
				
				
				httpservice.send(param);
				httpservice.addEventListener(ResultEvent.RESULT,success_sp_handler);
			}
			var currentSP:Object=new Object();
			[Bindable]
			var ACData:ArrayCollection=new ArrayCollection();
			[Bindable]
			private var SPInputData:ArrayCollection=new ArrayCollection();
			[Bindable]
			private var spatt:ArrayCollection=new ArrayCollection();
			import com.adobe.serialization.json.JSON;						  //JSON:1
			[Bindable]
			private var jsonObj1:Object; 
			private function success_sp_handler(result:ResultEvent):void
			{
				var re:String=result.result.toString();                        //JSON:3
				//	Alert.show(re);
				jsonObj1=JSON.decode(re);                                      //JSON:4
				var r:ArrayCollection=new ArrayCollection(jsonObj1 as Array);  //JSON:5
				//allorderb.dataProvider=r;
				spatt=r;
				var o:Object=r.getItemAt(0);
				var input:String=o.spinput;
				currentSP=o;
				field.text=o.field;
				
				ACData.removeAll();
				var g:Object=o.invokes;
				var invokes:ArrayCollection=new ArrayCollection(g as Array);
				for(var i:int=0;i<invokes.length;i++)
				{
					var o:Object=new Object();
					o.invokeid=invokes.getItemAt(i).id;
					o.invokename=invokes.getItemAt(i).iname;
					o.input=invokes.getItemAt(i).iinput;
					o.output=invokes.getItemAt(i).ioutput;
					o.resourceid="";
					o.resourcename="null";
					ACData.addItem(o);
				}
				
				
			//	Alert.show(input);
				
				var para:Array=input.split(",");
				var temp:ArrayCollection=new ArrayCollection();
				for(var i:int=0;i<para.length-1;i++)
				{
					var t:String=para[i];
					var tt:Array=t.split(":");
					var o1:Object=new Object();
					o1.para=tt[0];
					o1.kind=tt[1];
					o1.des=tt[2];
					o1.value="0";
					
					temp.addItem(o1);
				}
				SPInputData.removeAll();
				SPInputData=temp;
				spinput.dataProvider=temp;	
			}
			var index:int=0;
			var pp:String="";
			var kk:String="";
			var dd:String="";
			var vv:String="";
			
			public var vvalue:String="";
			public function initvalue_clickHandler(event:MouseEvent):void
			{
				index=spinput.selectedIndex;
				pp=spinput.selectedItem.para;
				kk=spinput.selectedItem.kind;
				dd=spinput.selectedItem.des;
				vv=spinput.selectedItem.value;
				
				
				var editWin:initValue =new  initValue();
				editWin.mainApp = this;	
				editWin.para=pp;
					editWin.addEventListener("finish",Finish);
				show(editWin,this,false);
				
				
				
			}
			private function Finish(event:Event):void
			{
				SPInputData.removeItemAt(index);
				var o:Object=new Object();
				o.para=pp;
				o.kind=kk;
				o.des=dd;
				o.value=vvalue;
				SPInputData.addItem(o);
			}
			public var rid:String="";
			public var rname:String="";
			public var urll:String="";
			private var ind:int=-1;
			private var invid:String="";
			private var invna:String="";
			public var rtitle:String="";
			
			private var allIRPara:ArrayCollection=new ArrayCollection();
			public var invokeResourcePara:ArrayCollection=new ArrayCollection();//活动-资源的参数对应关系（v:vname:sname）
			public function choose_resource__clickHandler(event:MouseEvent)
			{
				ind=spinvoke.selectedIndex;
				invid=spinvoke.selectedItem.invokeid;
				invna=spinvoke.selectedItem.invokename;
				
				Alert.show(invid);
				var editWin2:chooseResource=new chooseResource();
				
				editWin2.mainApp = this;	
				editWin2.invokeid=invid;
				editWin2.rname=invna;
				editWin2.invokeinput=spinvoke.selectedItem.input;
				editWin2.invokeoutput=spinvoke.selectedItem.output;
				editWin2.addEventListener("finish",FFinish);
				show(editWin2,this,true);
			}
			private var allWSDL:String=new String();
			private function FFinish(event:Event):void
			{
				allWSDL+=rtitle+",";
				var temp:ArrayCollection=spinvoke.dataProvider as ArrayCollection;
				temp.removeItemAt(ind);
				var o:Object=new Object();
				o.invokeid=invid;
				o.invokename=invna;
				o.resourceid=rid;
				o.resourcename=rname;
				o.resourceurl=urll;
				temp.addItem(o);
				spinvoke.dataProvider=temp;
				if(invokeResourcePara.length>0)//删除当前活动原来的参数对应关系
				{
					var flag:Boolean=true;
					while(flag)
					{
						flag=false;
						var intd:int=-1;
						for(var i:int=0;i<allIRPara.length;i++)
						{
							var sd:String=allIRPara.getItemAt(i).v;
							if(sd==invna)
							{
								intd=i;
								flag=true;
								break;
							}
						}
						if(intd!=-1)
							allIRPara.removeItemAt(intd);
					}
				}
				
				for(var i:int=0;i<invokeResourcePara.length;i++)
				{
					var o1:Object=invokeResourcePara.getItemAt(i);
					allIRPara.addItem(o1);
				}
			}
			
		]]>
	</fx:Script>
	<fx:Script>
		<![CDATA[
			protected function button1_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				startFunction();
				updateFile();
				deployFile();
				
			}
			protected function button2_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				startFunction();
			}
			protected function button3_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				deployFile();
			}
			var allWsdl:ArrayCollection=new ArrayCollection();
			private function startFunction():void
			{
				allWsdl.removeAll();
				var temp:ArrayCollection=spinvoke.dataProvider as ArrayCollection;
				for(var i:int=0;i<temp.length;i++)
				{
					var readWsdl:ReadWSDL=new ReadWSDL();
					var invokeName:String=temp.getItemAt(i).invokename;
					var inovkeid:String=temp.getItemAt(i).invokeid;
					var resourceid:String=temp.getItemAt(i).resourceid;
					var resourcename:String=temp.getItemAt(i).resoucename;
					var resourceurl:String=temp.getItemAt(i).resourceurl;
				//	Alert.show("222-"+invokeName+"++"+resourceurl);
					readWsdl.invokeName=invokeName;
					readWsdl.ReadWsdl(resourceurl,resourcename);	
				}
				
				var title:String=currentSP.title;
				getWsdlFile(title+"Process.wsdl",title);
				
				getBpelFile(title+".bpel",title);
				
				getDeployFile("deploy.xml",title);
			}
			var wsdl:String="";
			var bpel:String="";
			var deploy:String="";
			
			public function getWsdlFile(name:String, title:String):void
			{
				var httpservice:HTTPService=new HTTPService();
				httpservice.resultFormat="text";
				httpservice.url="http://localhost:8080/NewServicePatternDesigner/flexServlet";
				httpservice.method="POST";
				var param:Object=new Object;
				param.kind="queryFile";
				param.title=name;
				param.file=title;
				
				httpservice.send(param);
				httpservice.addEventListener(ResultEvent.RESULT,success_queryWsdlFile_handler);
			}
			
			import com.adobe.serialization.json.JSON;						  //JSON:1
			
			private function success_queryWsdlFile_handler(result:ResultEvent):void
			{
				var re:String=result.result.toString();                        //JSON:3
				//	Alert.show(re);
				
				wsdl=re;
				
			}
			
			public function getBpelFile(name:String, title:String):void
			{
				var httpservice:HTTPService=new HTTPService();
				httpservice.resultFormat="text";
				httpservice.url="http://localhost:8080/NewServicePatternDesigner/flexServlet";
				httpservice.method="POST";
				var param:Object=new Object;
				param.kind="queryFile";
				param.title=name;
				param.file=title;
				
				httpservice.send(param);
				httpservice.addEventListener(ResultEvent.RESULT,success_queryBpelFile_handler);
			}
			
			private function success_queryBpelFile_handler(result:ResultEvent):void
			{
				var re:String=result.result.toString();                        //JSON:3
				
				
				bpel=re;
				
			}
			
			public function getDeployFile(name:String, title:String):void
			{
				var httpservice:HTTPService=new HTTPService();
				httpservice.resultFormat="text";
				httpservice.url="http://localhost:8080/NewServicePatternDesigner/flexServlet";
				httpservice.method="POST";
				var param:Object=new Object;
				param.kind="queryFile";
				param.title=name;
				param.file=title;
				
				httpservice.send(param);
				httpservice.addEventListener(ResultEvent.RESULT,success_queryDeployFile_handler);
			}
			
			private function success_queryDeployFile_handler(result:ResultEvent):void
			{
				var re:String=result.result.toString();                        //JSON:3
				
				
				deploy=re;
				
			}
			protected function button7_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				updateFile();
			}

			public function updateFile():void
			{
				var allwsdl:ArrayCollection=Flow.processDefine.allWsdl;
				Alert.show(""+allwsdl.length);
				for(var i:int=0;i<allwsdl.length;i++)
				{
					var wsdl1:WSDL=allwsdl.getItemAt(i) as WSDL;
					var invokename:String=wsdl1.invokename;
					//	Alert.show(invokename);
					var targetNamespace:String=wsdl1.targetNamespace;
					var temp:String=invokename+"targetNamespace";
					wsdl=StringReplaceAll(wsdl,temp,targetNamespace);
					bpel=StringReplaceAll(bpel,temp,targetNamespace);
					deploy=StringReplaceAll(deploy,temp,targetNamespace);
					
					
					
					
					
					var temptt:String=invokename+"outputMessage";
					var mess1:String=wsdl1.outputmessage;
					//		Alert.show(temptt+"---"+mess1);
					wsdl=StringReplaceAll(wsdl,temptt,mess1);
					bpel=StringReplaceAll(bpel,temptt,mess1);
					deploy=StringReplaceAll(deploy,temptt,mess1);
					
					//	Alert.show(bpel);
					
					var temp1:String=invokename+"PLT";
					var plt:String=wsdl1.service+"PLT";
					wsdl=StringReplaceAll(wsdl,temp1,plt);
					bpel=StringReplaceAll(bpel,temp1,plt);
					deploy=StringReplaceAll(deploy,temp1,plt);
					
					//	Alert.show(bpel);
					var temp2:String=invokename+"Role";
					var role:String=wsdl1.service+"Role";
					wsdl=StringReplaceAll(wsdl,temp2,role);
					bpel=StringReplaceAll(bpel,temp2,role);
					deploy=StringReplaceAll(deploy,temp2,role);
					
					//	
					//	Alert.show(bpel);
					var temp3:String=invokename+"PortType";
					var pt:String=wsdl1.portType;
					wsdl=StringReplaceAll(wsdl,temp3,pt);
					bpel=StringReplaceAll(bpel,temp3,pt);
					deploy=StringReplaceAll(deploy,temp3,pt);
					
					//	Alert.show(bpel);
					
					var temp4:String=invokename+"location.wsdl";
					var lo:String=wsdl1.service+".wsdl";
					wsdl=StringReplaceAll(wsdl,temp4,lo);
					bpel=StringReplaceAll(bpel,temp4,lo);
					deploy=StringReplaceAll(deploy,temp4,lo);
					
					//	Alert.show(bpel);
					
					var temp5:String=invokename+"PL";
					var pl:String=wsdl1.service+"PL";
					wsdl=StringReplaceAll(wsdl,temp5,pl);
					bpel=StringReplaceAll(bpel,temp5,pl);
					deploy=StringReplaceAll(deploy,temp5,pl);
					
					//	Alert.show(bpel);
					
					var temp6:String=invokename+"inputElement";
					var ele:String=wsdl1.inputElement;
					wsdl=StringReplaceAll(wsdl,temp6,ele);
					bpel=StringReplaceAll(bpel,temp6,ele);
					deploy=StringReplaceAll(deploy,temp6,ele);
					
					//	Alert.show(bpel);
					
					var temp7:String=invokename+"outputElement";
					var ele:String=wsdl1.outputElement;
					wsdl=StringReplaceAll(wsdl,temp7,ele);
					bpel=StringReplaceAll(bpel,temp7,ele);
					deploy=StringReplaceAll(deploy,temp7,ele);
					
					//	Alert.show(bpel);
					
					var temp8:String=invokename+"inputMessage";
					var mess:String=wsdl1.inputmessage;
					wsdl=StringReplaceAll(wsdl,temp8,mess);
					bpel=StringReplaceAll(bpel,temp8,mess);
					deploy=StringReplaceAll(deploy,temp8,mess);
					
					Alert.show(bpel);
					
					
					//		Alert.show(bpel);
					
					temp=invokename+"inputPart";
					var mess2:String=wsdl1.inputParameter;
					var tt:Array=mess2.split(",");
					var tt1:String=tt[0];
					var tt2:Array=tt1.split(":");
					mess=tt2[2];
					wsdl=StringReplaceAll(wsdl,temp,mess);
					bpel=StringReplaceAll(bpel,temp,mess);
					deploy=StringReplaceAll(deploy,temp,mess);
					
					temp=invokename+"outputPart";
					var mess2:String=wsdl1.outputParameter;
					var tt:Array=mess2.split(",");
					var tt1:String=tt[0];
					var tt2:Array=tt1.split(":");
					mess=tt2[2];
					Alert.show(temp+"---"+mess);
					wsdl=StringReplaceAll(wsdl,temp,mess);
					bpel=StringReplaceAll(bpel,temp,mess);
					deploy=StringReplaceAll(deploy,temp,mess);
					
					temp=invokename+"Operation";
					var mess3:String=wsdl1.operationName;
					wsdl=StringReplaceAll(wsdl,temp,mess3);
					bpel=StringReplaceAll(bpel,temp,mess3);
					deploy=StringReplaceAll(deploy,temp,mess3);
					
					
					temp=invokename+"Service";
					var mess4:String=wsdl1.service;
					wsdl=StringReplaceAll(wsdl,temp,mess4);
					bpel=StringReplaceAll(bpel,temp,mess4);
					deploy=StringReplaceAll(deploy,temp,mess4);
					
					temp=invokename+"deployNamespace";
					var mess4:String=wsdl1.targetNamespace;
					var dee:String=mess4.substring(7);
					var int1:int=dee.lastIndexOf("/");
					var dee1:String=dee.substring(int1+1,dee.length);
					
					//	wsdl=StringReplaceAll(wsdl,temp,dee1);
					//	bpel=StringReplaceAll(bpel,temp,dee1); 
					deploy=StringReplaceAll(deploy,temp,dee1);
					
					
					
					for(var j:int=0;j<allIRPara.length;j++)
					{
						var ss:String=allIRPara.getItemAt(j).v;
						if(ss==invokename)
						{
							var sss:String=allIRPara.getItemAt(j).vname;
							var sst:String=allIRPara.getItemAt(j).sname;
							
							bpel=StringReplaceAll(bpel,sss,sst);
							
						}
					}
					
					
					temp=invokename;
					var mess4:String=wsdl1.service;
					wsdl=StringReplaceAll(wsdl,temp,mess4);
					bpel=StringReplaceAll(bpel,temp,mess4);
					deploy=StringReplaceAll(deploy,temp,mess4);
					
				}
			}
			public  function StringReplaceAll( source:String, find:String, replacement:String ) : String
			{
				return source.split( find ).join( replacement );
			}
			public function deployFile():void
			{
				var httpservice:HTTPService=new HTTPService();
				httpservice.resultFormat="text";
				httpservice.url="http://localhost:8080/NewServicePatternDesigner/flexServlet";
				httpservice.method="POST";
				var param:Object=new Object;
				param.kind="DeployFile";
				//out.text=bpel;
				param.wsdl=wsdl;
				param.bpel=bpel;
				param.deploy=deploy;
				param.title=currentSP.title;
				param.allwsdl=allWSDL;
					
					httpservice.send(param);
				httpservice.addEventListener(ResultEvent.RESULT,success_DeployFile_handler);
			}
			public function success_DeployFile_handler(event:ResultEvent):void
			{
				var resu:String=event.result.toString();
				if(resu=="ok")
					Alert.show("部署成功！");
				else
					Alert.show("部署失败！");
			}
			protected function button4_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var editWin:querywsdl =new  querywsdl();
				editWin.mainApp = this;	
				
				//	editWin.addEventListener("finish",NewFileFinish);
				show(editWin,this,false);
				editWin.wsdl.text=wsdl;
			}
			
			
			protected function button5_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var editWin:querybpel =new  querybpel();
				editWin.mainApp = this;	
				
				//	editWin.addEventListener("finish",NewFileFinish);
				show(editWin,this,false);
				
				editWin.bpel.text=bpel;
			}
			protected function button6_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				testData();
			}
			public function testData()
			{
				var da:ArrayCollection=spinput.dataProvider as ArrayCollection;
				var result:String="";
				for(var i:int=0;i<da.length;i++)
				{
					var pa:String=da.getItemAt(i).para;
					var va:String=da.getItemAt(i).value;
					result+=pa+":"+va+";";
				}
				Alert.show(result);
				var httpservice:HTTPService=new HTTPService();
				httpservice.resultFormat="text";
				httpservice.url="http://localhost:8080/NewServicePatternDesigner/flexServlet";
				httpservice.method="POST";
				var param:Object=new Object;
				param.kind="testData";
				param.data=result;
				param.title=currentSP.title;
				httpservice.send(param);
				httpservice.addEventListener(ResultEvent.RESULT,success_getResult_handler);
			}
			private function success_getResult_handler(event:ResultEvent):void
			{
				var result:String=event.result.toString();
			//	var sta:int=result.indexOf("<return>");
			//	var end:int=result.indexOf("</return>");
			//	result=result.substring(sta,end);
				out.text=result;
			}

		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:BorderContainer x="0" y="0" width="100%" height="100%" borderWeight="2" fontFamily="微软雅黑">
		<s:Label x="26" y="45" text="用户服务："/>
		<s:DropDownList x="90" y="37" height="30" width="223" id="service" dataProvider="{allOrderBus}" labelField="spname" change="service_changeHandler(event)"></s:DropDownList>
		<s:Label x="26" y="103" text="服务描述："/>
		<s:TextArea x="90" y="93" width="551" height="50" id="spdes" editable="false"/>
		<s:Label x="33" y="157" text="输入初始值："/>
		<mx:DataGrid x="32" y="173" width="614" height="106" id="spinput" dataProvider="{SPInputData}">
			<mx:columns>
				<mx:DataGridColumn headerText="参数名称" dataField="para" textAlign="center" editable="false" draggable="false"/>
				<mx:DataGridColumn headerText="参数类型" dataField="kind" textAlign="center" editable="false" draggable="false"/>
				<mx:DataGridColumn headerText="参数描述" dataField="des" textAlign="center" editable="false" draggable="false"/>
				<mx:DataGridColumn headerText="值" dataField="value" editable="false" draggable="false" textAlign="center"/>
				<mx:DataGridColumn headerText="设定初始值" dataField="col3" editable="false" draggable="false" textAlign="center">
					<mx:itemRenderer>
						<fx:Component>
							<mx:LinkButton label="设定" click="outerDocument.initvalue_clickHandler(event)" useHandCursor="true" buttonMode="true">	
							</mx:LinkButton>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</mx:columns>
		</mx:DataGrid>
		<s:Label x="30" y="455" text="输出："/>
		<s:Button x="299" y="10" label="执行" width="126" height="30" click="button1_clickHandler(event)" visible="false"/>
		<s:TextArea x="30" y="478" width="616" height="107" id="out"/>
		<s:Label x="31" y="290" text="服务选择："/>
		<mx:DataGrid x="29" y="309" width="617" height="128" id="spinvoke" dataProvider="{ACData}">
			<mx:columns>
				<mx:DataGridColumn headerText="活动名称" dataField="invokename" editable="false" draggable="false" textAlign="center"/>
				<mx:DataGridColumn headerText="资源名称" dataField="resourcename" editable="false" draggable="false" textAlign="center"/>
				<mx:DataGridColumn headerText="选择服务资源" dataField="col3" editable="false" draggable="false" textAlign="center">
					<mx:itemRenderer>
						<fx:Component>
							<mx:LinkButton label="选择" click="outerDocument.choose_resource__clickHandler(event)" useHandCursor="true" buttonMode="true">	
							</mx:LinkButton>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</mx:columns>
		</mx:DataGrid>
		<s:Button x="82" y="448" label="读取文件" click="button2_clickHandler(event)" visible="true"/>
		<s:Button x="248" y="448" label="部署" click="button3_clickHandler(event)" visible="true" />
		<s:Button x="499" y="445" label="wsdl" click="button4_clickHandler(event)" visible="false" />
		<s:Button x="576" y="444" label="bpel" click="button5_clickHandler(event)" visible="false" />
		<s:Button x="347" y="444" label="查看结果" height="30" width="126" click="button6_clickHandler(event)"/>
		<s:Label x="341" y="45" text="所属领域："/>
		<s:TextInput x="408" y="38" height="30" width="228" id="field" editable="false"/>
		<s:Button x="164" y="448" label="文件生成" click="button7_clickHandler(event)"/>
		<s:Label x="151" y="452" text="-&gt;"/>
		<s:Label x="235" y="453" text="-&gt;"/>
	</s:BorderContainer>
</mx:Application>
